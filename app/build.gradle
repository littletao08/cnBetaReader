apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    def buildDate
    def verName

    defaultConfig {
        applicationId "com.ywwxhz.cnbetareader"
        archivesBaseName = "cnBeta_Plus"
        minSdkVersion 19
        targetSdkVersion 25
        resConfigs "zh-rCN"
    }

    signingConfigs {
        release
        debug
    }

    def propFile = file('../signing.properties')

    if (System.getenv("KEY_STROE_FILE") != null
            && System.getenv("KEY_STROE_PASSWORD") != null
            && System.getenv("KEY_ALIAS_RELEASE") != null
            && System.getenv("KEY_PASSWORD") != null
            && System.getenv("KEY_ALIAS_DEBUG") != null) {
        println "\nload signingConfigs form System Environment variables"
        def keyStoreFile = file(System.getenv("KEY_STROE_FILE"))
        android.signingConfigs.release.storeFile =  keyStoreFile
        android.signingConfigs.release.storePassword =  System.getenv("KEY_STROE_PASSWORD")
        android.signingConfigs.release.keyAlias = System.getenv("KEY_ALIAS_RELEASE")
        android.signingConfigs.release.keyPassword = System.getenv("KEY_PASSWORD")
        android.signingConfigs.debug.storeFile = keyStoreFile
        android.signingConfigs.debug.storePassword = System.getenv("KEY_STROE_PASSWORD")
        android.signingConfigs.debug.keyAlias = System.getenv("KEY_ALIAS_DEBUG")
        android.signingConfigs.debug.keyPassword = System.getenv("KEY_PASSWORD")
    } else if (propFile.canRead()) {
        println "\nload signingConfigs form signing.properties"
        def Properties p = new Properties()
        p.load(new FileInputStream(propFile))
        if (p != null
                && p.containsKey('KEY_STROE_FILE')
                && p.containsKey('KEY_STROE_PASSWORD')
                && p.containsKey('KEY_ALIAS')
                && p.containsKey('KEY_PASSWORD')
        ) {
            android.signingConfigs.release.storeFile = file(p['KEY_STROE_FILE'])
            android.signingConfigs.release.storePassword = p['KEY_STROE_PASSWORD']
            android.signingConfigs.release.keyAlias = p['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = p['KEY_PASSWORD']
        }

    } else {
        println "\nsigningConfigs: Required properties in System Environment variables or signing.properties are missing"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        releasePreview {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
//            applicationIdSuffix '.debug'
            signingConfig signingConfigs.release
        }
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def vercode = versionProps['VERSION_CODE'].toInteger()
        verName = versionProps['VERSION_NAME']
        def runTasks = gradle.startParameter.taskNames
        if ('build' in runTasks) {
            vercode++
            versionProps['VERSION_CODE'] = vercode.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        }
        buildDate = new Date().format("yyyyMMddHHmmss")

        defaultConfig {
            versionCode vercode
            versionName verName
            buildConfigField  "String",  "buildDate" ,"\""+buildDate.toString()+"\""
        }

    }

    def runTasks = gradle.startParameter.taskNames
    if ('b' in runTasks || 'build' in runTasks) {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name.replace(".apk"
                            , "-${defaultConfig.versionName}-${buildDate}-${defaultConfig.versionCode}.apk".replaceAll(" ", "-"))
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':Crouton')
    compile project(':FloatingActionButton')
    compile project(':materialish-progress')
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.0.12'
    compile project(':SubSamplingScaleImageView')
    compile project(':discreteSeekBar')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.lzy.net:okgo:2.0.0'
    compile 'org.jsoup:jsoup:1.8.3'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile project(':android-support-v4-preferencefragment')
    compile project(':SwipeBackLayout')
    compile project(':SuperSaiyanScrollView')
    compile project(':FilterMenu')
//    compile project(':MaterialRipple')
    compile 'com.google.code.gson:gson:2.5'
}
